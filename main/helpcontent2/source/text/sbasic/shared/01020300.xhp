<?xml version="1.0" encoding="UTF-8"?>

<!--***********************************************************
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 ***********************************************************-->

<helpdocument version="1.0">
<meta>
<topic id="textsbasicshared01020300xml" indexer="include" status="PUBLISH">
<title id="tit" xml-lang="en-US">Using Procedures and Functions</title>
<filename>/text/sbasic/shared/01020300.xhp</filename>
</topic>
</meta>
<body>
<section id="prozedur">
<bookmark xml-lang="en-US" branch="index" id="bm_id3149456">
<bookmark_value>procedures</bookmark_value>
<bookmark_value>functions;using</bookmark_value>
<bookmark_value>variables;passing to procedures and functions</bookmark_value>
<bookmark_value>parameters;for procedures and functions</bookmark_value>
<bookmark_value>parameters;passing by reference or value</bookmark_value>
<bookmark_value>variables;scope</bookmark_value>
<bookmark_value>scope of variables</bookmark_value>
<bookmark_value>GLOBAL variables</bookmark_value>
<bookmark_value>PUBLIC variables</bookmark_value>
<bookmark_value>PRIVATE variables</bookmark_value>
<bookmark_value>functions;return value type</bookmark_value>
<bookmark_value>return value type of functions</bookmark_value>
</bookmark>
<paragraph role="heading" id="hd_id3149456" xml-lang="en-US" level="1" l10n="U" oldref="1"><link href="text/sbasic/shared/01020300.xhp">Using Procedures and Functions</link></paragraph>
<paragraph role="paragraph" id="par_id3150767" xml-lang="en-US" l10n="U" oldref="2">The following describes the basic use of procedures and functions in $[officename] Basic.</paragraph>
</section>
<paragraph role="note" id="par_id3151215" xml-lang="en-US" l10n="U" oldref="56">When you create a new module, $[officename] Basic automatically inserts a SUB called "Main". This default name has nothing to do with the order or the starting point of a $[officename] Basic project. You can also safely rename this SUB.</paragraph>
<paragraph role="note" id="par_id314756320" xml-lang="en-US" l10n="NEW">Some restrictions apply for the names of your public variables, subs, and functions. You must not use the same name as one of the modules of the same library.</paragraph>
<paragraph role="paragraph" id="par_id3154124" xml-lang="en-US" l10n="U" oldref="3">Procedures (SUBS) and functions (FUNCTIONS) help you maintaining a structured overview by separating a program into logical pieces.</paragraph>
<paragraph role="paragraph" id="par_id3153193" xml-lang="en-US" l10n="CHG" oldref="4">One benefit of procedures and functions is that, once you have developed a program code containing task components, you can use this code in another project.</paragraph>
<paragraph role="heading" id="hd_id3153770" xml-lang="en-US" level="2" l10n="U" oldref="26">Passing Variables to Procedures (SUB) and Functions (FUNCTION)</paragraph>
<paragraph role="paragraph" id="par_id3155414" xml-lang="en-US" l10n="U" oldref="27">Variables can be passed to both procedures and functions. The SUB or FUNCTION must be declared to expect parameters:</paragraph>
<paragraph role="code" id="par_id3163710" xml-lang="en-US" l10n="U" oldref="28">SUB SubName(<emph>Parameter1 As Type, Parameter2 As Type,...</emph>)</paragraph>
<paragraph role="code" id="par_id3151114" xml-lang="en-US" l10n="U" oldref="29">Program code</paragraph>
<paragraph role="code" id="par_id3146975" xml-lang="en-US" l10n="U" oldref="30">END SUB</paragraph>
<paragraph role="paragraph" id="par_id3152577" xml-lang="en-US" l10n="U" oldref="31">The SUB is called using the following syntax:</paragraph>
<paragraph role="code" id="par_id3159154" xml-lang="en-US" l10n="U" oldref="32">SubName(Value1, Value2,...)</paragraph>
<paragraph role="paragraph" id="par_id3147124" xml-lang="en-US" l10n="U" oldref="33">The parameters passed to a SUB must fit to those specified in the SUB declaration.</paragraph>
<paragraph role="paragraph" id="par_id3147397" xml-lang="en-US" l10n="U" oldref="34">The same process applies to FUNCTIONS. In addition, functions always return a function result. The result of a function is defined by assigning the return value to the function name:</paragraph>
<paragraph role="code" id="par_id3149412" xml-lang="en-US" l10n="U" oldref="35">FUNCTION FunctionName(Parameter1 As Type, Parameter2 As Type,...) As Type</paragraph>
<paragraph role="code" id="par_id3156284" xml-lang="en-US" l10n="U" oldref="36">Program code</paragraph>
<paragraph role="code" id="par_id3145799" xml-lang="en-US" l10n="U" oldref="37">
<emph>FunctionName=Result</emph>
</paragraph>
<paragraph role="code" id="par_id3150716" xml-lang="en-US" l10n="U" oldref="38">End Function</paragraph>
<paragraph role="paragraph" id="par_id3153839" xml-lang="en-US" l10n="U" oldref="39">The FUNCTION is called using the following syntax:</paragraph>
<paragraph role="code" id="par_id3146914" xml-lang="en-US" l10n="U" oldref="40">Variable=FunctionName(Parameter1, Parameter2,...)</paragraph>
<paragraph role="tip" id="par_idN107B3" xml-lang="en-US">You can also use the fully qualified name to call a procedure or function:<br/>
<item type="literal">Library.Module.Macro()</item>
<br/> For example, to call the Autotext macro from the Gimmicks library, use the following command:<br/>
<item type="literal">Gimmicks.AutoText.Main()</item>
</paragraph>
<paragraph role="heading" id="hd_id3156276" xml-lang="en-US" level="2" l10n="U" oldref="45">Passing Variables by Value or Reference</paragraph>
<paragraph role="paragraph" id="par_id3155765" xml-lang="en-US" l10n="U" oldref="47">Parameters can be passed to a SUB or a FUNCTION either by reference or by value. Unless otherwise specified, a parameter is always passed by reference. That means that a SUB or a FUNCTION gets the parameter and can read and modify its value.</paragraph>
<paragraph role="paragraph" id="par_id3145640" xml-lang="en-US" l10n="U" oldref="53">If you want to pass a parameter by value insert the key word "ByVal" in front of the parameter when you call a SUB or FUNCTION, for example:</paragraph>
<paragraph role="code" id="par_id3150042" xml-lang="en-US" l10n="U" oldref="54">Result = Function(<emph>ByVal</emph> Parameter)</paragraph>
<paragraph role="paragraph" id="par_id3149258" xml-lang="en-US" l10n="U" oldref="55">In this case, the original content of the parameter will not be modified by the FUNCTION since it only gets the value and not the parameter itself.</paragraph>
<paragraph role="heading" id="hd_id3150982" xml-lang="en-US" level="2" l10n="U" oldref="57">Scope of Variables</paragraph>
<paragraph role="paragraph" id="par_id3149814" xml-lang="en-US" l10n="CHG" oldref="58">A variable defined within a SUB or FUNCTION, only remains valid until the procedure is exited. This is known as a "local" variable. In many cases, you need a variable to be valid in all procedures, in every module of all libraries, or after a SUB or FUNCTION is exited.</paragraph>
<paragraph role="heading" id="hd_id3154186" xml-lang="en-US" level="3" l10n="U" oldref="59">Declaring Variables Outside a SUB or FUNCTION</paragraph>
<paragraph role="code" id="par_id3150208" xml-lang="en-US" l10n="CHG" oldref="111">GLOBAL VarName As TYPENAME</paragraph>
<paragraph role="paragraph" id="par_id3145258" xml-lang="en-US" l10n="U" oldref="112">The variable is valid as long as the $[officename] session lasts.</paragraph>
<paragraph role="code" id="par_id3153198" xml-lang="en-US" l10n="CHG" oldref="60">PUBLIC VarName As TYPENAME</paragraph>
<paragraph role="paragraph" id="par_id3150088" xml-lang="en-US" l10n="U" oldref="61">The variable is valid in all modules.</paragraph>
<paragraph role="code" id="par_id3158212" xml-lang="en-US" l10n="CHG" oldref="62">PRIVATE VarName As TYPENAME</paragraph>
<paragraph role="paragraph" id="par_id3152994" xml-lang="en-US" l10n="U" oldref="63">The variable is only valid in this module.</paragraph>
<paragraph role="code" id="par_id3150886" xml-lang="en-US" l10n="U" oldref="64">DIM VarName As TYPENAME</paragraph>
<paragraph role="paragraph" id="par_id3150368" xml-lang="en-US" l10n="U" oldref="65">The variable is only valid in this module.</paragraph>
<paragraph role="heading" id="hd_id5097506" xml-lang="en-US" level="3" l10n="NEW">Example for private variables</paragraph>
<paragraph role="paragraph" id="par_id8738975" xml-lang="en-US" l10n="NEW">Enforce private variables to be private across modules by setting CompatibilityMode(true).</paragraph><comment>from i17948, see i54894</comment>
<paragraph role="code" id="par_id146488" xml-lang="en-US" l10n="NEW">REM ***** Module1 *****</paragraph>
<paragraph role="code" id="par_id2042298" xml-lang="en-US" l10n="NEW">Private myText As String</paragraph>
<paragraph role="code" id="par_id2969756" xml-lang="en-US" l10n="NEW">Sub initMyText</paragraph>
<paragraph role="code" id="par_id9475997" xml-lang="en-US" l10n="NEW">myText = "Hello"</paragraph>
<paragraph role="code" id="par_id6933500" xml-lang="en-US" l10n="NEW">print "in module1 : ", myText</paragraph>
<paragraph role="code" id="par_id631733" xml-lang="en-US" l10n="NEW">End Sub</paragraph>
<paragraph role="code" id="par_id8234199" xml-lang="en-US" l10n="NEW">REM ***** Module2 *****</paragraph>
<paragraph role="code" id="par_id6969512" xml-lang="en-US" l10n="NEW">'Option Explicit</paragraph>
<paragraph role="code" id="par_id1196935" xml-lang="en-US" l10n="NEW">Sub demoBug</paragraph>
<paragraph role="code" id="par_id1423993" xml-lang="en-US" l10n="NEW">CompatibilityMode( true )</paragraph>
<paragraph role="code" id="par_id6308786" xml-lang="en-US" l10n="NEW">initMyText</paragraph>
<paragraph role="code" id="par_id4104129" xml-lang="en-US" l10n="NEW">' Now returns empty string</paragraph>
<paragraph role="code" id="par_id7906125" xml-lang="en-US" l10n="NEW">' (or rises error for Option Explicit)</paragraph>
<paragraph role="code" id="par_id8055970" xml-lang="en-US" l10n="NEW">print "Now in module2 : ", myText</paragraph>
<paragraph role="code" id="par_id2806176" xml-lang="en-US" l10n="NEW">End Sub</paragraph>
<paragraph role="heading" id="hd_id3154368" xml-lang="en-US" level="3" l10n="U" oldref="66">Saving Variable Content after Exiting a SUB or FUNCTION</paragraph>
<paragraph role="code" id="par_id3156288" xml-lang="en-US" l10n="CHG" oldref="67">STATIC VarName As TYPENAME</paragraph>
<paragraph role="paragraph" id="par_id3154486" xml-lang="en-US" l10n="U" oldref="68">The variable retains its value until the next time the FUNCTION or SUB is entered. The declaration must exist inside a SUB or a FUNCTION.</paragraph>
<paragraph role="heading" id="hd_id3155809" xml-lang="en-US" level="2" l10n="U" oldref="41">Specifying the Return Value Type of a FUNCTION</paragraph>
<paragraph role="paragraph" id="par_id3149404" xml-lang="en-US" l10n="U" oldref="42">As with variables, include a type-declaration character after the function name, or the type indicated by "As" and the corresponding key word at the end of the parameter list to define the type of the function's return value, for example:</paragraph>
<paragraph role="code" id="par_id3152899" xml-lang="en-US" l10n="U" oldref="43">Function WordCount(WordText as String) <emph>as Integer</emph>
</paragraph>
</body>
</helpdocument>
