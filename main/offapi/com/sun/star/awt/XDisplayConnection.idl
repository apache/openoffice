/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_awt_XDisplayConnection_idl__
#define __com_sun_star_awt_XDisplayConnection_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

//=============================================================================

module com { module sun { module star { module awt {

 published interface XEventHandler;

//=============================================================================

/** This interface should be implemented by toolkits that want to give access
	to their internal message handling loop.
*/
published interface XDisplayConnection: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------

	/** registers an event handler.

		@param window
		the platform specific window id. If empty, the handler should be 
		registered for all windows.

		@param eventHandler
		the handler to register.

		@param eventMask
		the event mask specifies the events the handler is interested in.
	*/
	[oneway] void addEventHandler( [in] any window, [in] XEventHandler eventHandler, [in] long eventMask );

	//-------------------------------------------------------------------------

	/** removes a eventHandler from the handler list.

		@param window
		the platform specific window id the handler should be deregistered for. 
		If empty, the handler should be deregistered completely.

		@param eventHandler
		the handler to remove.
	*/
	[oneway] void removeEventHandler( [in] any window, [in] XEventHandler eventHandler );
	
    //-------------------------------------------------------------------------

	/** register an error handler for toolkit specific errors.

		@param errorHandler
		the handler to register.
	*/
	[oneway] void addErrorHandler( [in] XEventHandler errorHandler );

	//-------------------------------------------------------------------------

	/** remover an error handler from the handler list.

		@param errorHandler
		the handler to remove.
	*/
	[oneway] void removeErrorHandler( [in] XEventHandler errorhandler );

	//-------------------------------------------------------------------------

	/** returns a identifier.

        @returns a unique platform dependent identifier for a display connection.
	*/
	any getIdentifier();
    
};

//=============================================================================

}; }; }; };

#endif
